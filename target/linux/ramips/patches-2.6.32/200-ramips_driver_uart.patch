--- a/drivers/serial/8250.c
+++ b/drivers/serial/8250.c
@@ -299,11 +299,18 @@ static const struct serial8250_config ua
 		.fcr		= UART_FCR_ENABLE_FIFO | UART_FCR_R_TRIG_00,
 		.flags		= UART_CAP_FIFO | UART_CAP_AFE,
 	},
+	[PORT_U6_16550A] = {
+		.name		= "U6_16550A",
+		.fifo_size	= 64,
+		.tx_loadsz	= 64,
+		.fcr		= UART_FCR_ENABLE_FIFO | UART_FCR_R_TRIG_10,
+		.flags		= UART_CAP_FIFO | UART_CAP_AFE,
+	},
 };
 
-#if defined (CONFIG_SERIAL_8250_AU1X00)
+#if defined (CONFIG_SERIAL_8250_AU1X00) || defined ( CONFIG_SERIAL_8250_RAMIPS )
 
-/* Au1x00 UART hardware has a weird register layout */
+/* Au1x00 or Ralink UART hardware has a weird register layout */
 static const u8 au_io_in_map[] = {
 	[UART_RX]  = 0,
 	[UART_IER] = 2,
@@ -421,7 +428,7 @@ static unsigned int mem32_serial_in(stru
 	return readl(p->membase + offset);
 }
 
-#ifdef CONFIG_SERIAL_8250_AU1X00
+#if defined (CONFIG_SERIAL_8250_AU1X00 ) || defined ( CONFIG_SERIAL_8250_RAMIPS )
 static unsigned int au_serial_in(struct uart_port *p, int offset)
 {
 	offset = map_8250_in_reg(p, offset) << p->regshift;
@@ -502,7 +509,7 @@ static void set_io_from_upio(struct uart
 		p->serial_out = mem32_serial_out;
 		break;
 
-#ifdef CONFIG_SERIAL_8250_AU1X00
+#if defined (CONFIG_SERIAL_8250_AU1X00 ) || defined ( CONFIG_SERIAL_8250_RAMIPS )
 	case UPIO_AU:
 		p->serial_in = au_serial_in;
 		p->serial_out = au_serial_out;
@@ -534,7 +541,7 @@ serial_out_sync(struct uart_8250_port *u
 	switch (p->iotype) {
 	case UPIO_MEM:
 	case UPIO_MEM32:
-#ifdef CONFIG_SERIAL_8250_AU1X00
+#if defined (CONFIG_SERIAL_8250_AU1X00 ) || defined ( CONFIG_SERIAL_8250_RAMIPS )
 	case UPIO_AU:
 #endif
 	case UPIO_DWAPB:
@@ -572,8 +579,8 @@ static inline void _serial_dl_write(stru
 	serial_outp(up, UART_DLM, value >> 8 & 0xff);
 }
 
-#if defined(CONFIG_SERIAL_8250_AU1X00)
-/* Au1x00 haven't got a standard divisor latch */
+#if defined (CONFIG_SERIAL_8250_AU1X00 ) || defined ( CONFIG_SERIAL_8250_RAMIPS )
+/* Au1x00 or Ralink haven't got a standard divisor latch */
 static int serial_dl_read(struct uart_8250_port *up)
 {
 	if (up->port.iotype == UPIO_AU)
@@ -780,22 +787,28 @@ static int size_fifo(struct uart_8250_po
  */
 static unsigned int autoconfig_read_divisor_id(struct uart_8250_port *p)
 {
-	unsigned char old_dll, old_dlm, old_lcr;
+/*	unsigned char old_dll, old_dlm, old_lcr;*/
+	unsigned char old_lcr;
+	unsigned int old_dl;
 	unsigned int id;
 
 	old_lcr = serial_inp(p, UART_LCR);
 	serial_outp(p, UART_LCR, UART_LCR_DLAB);
 
-	old_dll = serial_inp(p, UART_DLL);
-	old_dlm = serial_inp(p, UART_DLM);
 
-	serial_outp(p, UART_DLL, 0);
-	serial_outp(p, UART_DLM, 0);
 
-	id = serial_inp(p, UART_DLL) | serial_inp(p, UART_DLM) << 8;
+	old_dl = serial_dl_read(p);
 
-	serial_outp(p, UART_DLL, old_dll);
-	serial_outp(p, UART_DLM, old_dlm);
+/*	serial_outp(p, UART_DLL, 0);*/
+/*	serial_outp(p, UART_DLM, 0);*/
+	serial_dl_write(p, 0);
+	id = serial_dl_read(p);
+
+/*	id = serial_inp(p, UART_DLL) | serial_inp(p, UART_DLM) << 8;*/
+
+/*	serial_outp(p, UART_DLL, old_dll);*/
+/*	serial_outp(p, UART_DLM, old_dlm);*/
+	serial_dl_write(p, old_dl);
 	serial_outp(p, UART_LCR, old_lcr);
 
 	return id;
@@ -2428,7 +2441,11 @@ serial8250_pm(struct uart_port *port, un
 static unsigned int serial8250_port_size(struct uart_8250_port *pt)
 {
 	if (pt->port.iotype == UPIO_AU)
-		return 0x100000;
+#ifdef CONFIG_SERIAL_8250_RALINK
+		return 256;
+#else
+		return 0x1000;
+#endif
 #ifdef CONFIG_ARCH_OMAP
 	if (is_omap_port(pt))
 		return 0x16 << pt->port.regshift;
--- a/drivers/serial/Kconfig
+++ b/drivers/serial/Kconfig
@@ -275,6 +275,15 @@ config SERIAL_8250_RM9K
 	  port hardware found on MIPS RM9122 and similar processors.
 	  If unsure, say N.
 
+config SERIAL_8250_RAMIPS
+	bool "Support for MIPS Ralink integrate serial port"
+	depends on SERIAL_8250
+	default y if ( SOC_MT7620 )
+	help
+	    If you have a Ralink MT7620 SoC based board and want to use the
+	    serial port, say Y to this option. The driver can handle up to 2 serial
+	    ports. If unsure, say N.
+
 comment "Non-8250 serial port support"
 
 config SERIAL_AMBA_PL010
--- a/include/linux/serial_core.h
+++ b/include/linux/serial_core.h
@@ -44,7 +44,8 @@
 #define PORT_RM9000	16	/* PMC-Sierra RM9xxx internal UART */
 #define PORT_OCTEON	17	/* Cavium OCTEON internal UART */
 #define PORT_AR7	18	/* Texas Instruments AR7 internal UART */
-#define PORT_MAX_8250	18	/* max port ID */
+#define PORT_U6_16550A  19      /* ST-Ericsson U6xxx internal UART */
+#define PORT_MAX_8250	19	/* max port ID */
 
 /*
  * ARM specific type numbers.  These are not currently guaranteed
