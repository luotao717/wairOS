Index: linux-2.6.32.27/drivers/mtd/devices/m25p80.c
===================================================================
--- linux-2.6.32.27.orig/drivers/mtd/devices/m25p80.c	2013-06-06 13:42:24.000000000 +0800
+++ linux-2.6.32.27/drivers/mtd/devices/m25p80.c	2013-06-06 14:01:00.000000000 +0800
@@ -947,6 +947,79 @@
 	 */
 };
 
+/* READ mtd data by mtd name */
+#include <linux/err.h>
+int rl_mtd_read(char *name, loff_t from, size_t len, u_char *buf)
+{
+	int ret;
+	size_t rdlen;
+	struct mtd_info *mtd;
+    //printk("%s: [%d] read mtd section %s\n", __func__, __LINE__, name);
+	mtd = get_mtd_device_nm(name);
+	if (IS_ERR(mtd))
+		return (int)mtd;
+
+	ret = mtd->read(mtd, from, len, &rdlen, buf);
+	if (rdlen != len)
+		printk("warning: %s [%d] rdlen is not equal to len\n", __func__, __LINE__);
+
+	put_mtd_device(mtd);
+	return ret;
+}
+
+int rl_mtd_write(char *name, loff_t to, size_t len, u_char *buf)
+{
+    int ret = -1;
+    size_t rdlen, wrlen;
+    struct mtd_info *mtd;
+    struct erase_info ei;
+    u_char *bak = NULL;
+
+    mtd = get_mtd_device_nm(name);
+    if (IS_ERR(mtd))
+        return (int)mtd;
+    if (len > mtd->erasesize) {
+        put_mtd_device(mtd);
+        return -E2BIG;
+    }
+
+    bak = kmalloc(mtd->erasesize, GFP_KERNEL);
+    if (bak == NULL) {
+        put_mtd_device(mtd);
+        return -ENOMEM;
+    }
+
+    ret = mtd->read(mtd, 0, mtd->erasesize, &rdlen, bak);
+    if (ret != 0) {
+        put_mtd_device(mtd);
+        kfree(bak);
+        return ret;
+    }
+    if(rdlen != mtd->erasesize)
+        printk("warning: rl_mtd_write: rdlen is not equal to erasesize\n");
+
+    memcpy(bak + to, buf, len);
+
+    ei.mtd = mtd;
+    ei.callback = NULL;
+    ei.addr = 0;
+    ei.len = mtd->erasesize;
+    ei.priv = 0;
+    ret = mtd->erase(mtd, &ei);
+    if (ret != 0) {
+        put_mtd_device(mtd);
+        kfree(bak);
+        return ret;
+    }
+
+    ret = mtd->write(mtd, 0, mtd->erasesize, &wrlen, bak);
+
+    put_mtd_device(mtd);
+    kfree(bak);
+    return ret;
+}
+
+
 
 static int __init m25p80_init(void)
 {
@@ -966,3 +1039,5 @@
 MODULE_LICENSE("GPL");
 MODULE_AUTHOR("Mike Lavender");
 MODULE_DESCRIPTION("MTD SPI driver for ST M25Pxx flash chips");
+EXPORT_SYMBOL(rl_mtd_read); /* john add for wifi read art data */
+EXPORT_SYMBOL(rl_mtd_write); /* john add for wifi read art data */
